"""
Count tags in captions in your training data directories (which generated by image tag estimation systems
like DeepDanbooru https://github.com/KichangKim/DeepDanbooru).

This can give you a perspective: what is the tags of the target you are training.
If you want the model to learn some tags that have been tagged, it is a good idea to remove them from the captions.

What effect image captions have during training:
https://github.com/rinongal/textual_inversion/issues/131
"""
import os
import re

TAG_FILE_DIR = r''
TAG_FILE_EXT = 'txt'


def print_one_tag_per_line(ranked_tags: list[(str, int)]):
    print('\n'.join([str(t) for t in ranked_tags]))


def rank_counted_tags(tag_frequencies: dict[str, int]) -> list[(str, int)]:
    """The higher the frequency, the higher the ranking"""
    return sorted([(k, v) for k, v in tag_frequencies.items()], key=lambda tup: tup[1], reverse=True)


def count_tag_frequencies() -> dict[str, int]:
    """Basically just read the text files, find tags, then count them."""
    file_dir = TAG_FILE_DIR if TAG_FILE_DIR else './tests/data/count_tags'
    tag_file_ext = TAG_FILE_EXT if TAG_FILE_EXT else 'txt'

    tag_map = dict()

    for filename in [f for f in os.listdir(file_dir) if f.endswith(tag_file_ext)]:
        with open(os.path.join(file_dir, filename), 'r') as file:
            for line in [l.removesuffix('\n') for l in file.readlines()]:
                if ',' in line:
                    tags = re.compile(r'\s*,\s*').split(line)
                else:
                    tags = [line]

                for tag in tags:
                    tag_map[tag] = tag_map.get(tag) + 1 if (tag in tag_map.keys()) else 1

    return tag_map


if __name__ == '__main__':
    print_one_tag_per_line(rank_counted_tags(count_tag_frequencies()))
